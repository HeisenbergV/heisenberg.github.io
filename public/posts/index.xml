<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Heisenberg</title>
    <link>https://heisenbergv.github.io/posts/</link>
    <description>Recent content in Posts on Heisenberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Tue, 27 Aug 2019 15:50:19 +0800</lastBuildDate>
    
	<atom:link href="https://heisenbergv.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSAPP(1) - 信息的表示和处理</title>
      <link>https://heisenbergv.github.io/posts/coder/20190827-csapp1/</link>
      <pubDate>Tue, 27 Aug 2019 15:50:19 +0800</pubDate>
      
      <guid>https://heisenbergv.github.io/posts/coder/20190827-csapp1/</guid>
      <description>计算机存的什么 计算机存储的是二进制，每一位存储的是0或1。大多数计算机使用1字节（也就是8位），作为最小可寻址的内存单位。 每个字节都有一个唯一的数字来标识，也就是地址（address）。每个计算机都有一个字长（word size），也就是常说的64位操作系统，32位操作系统。字长决定了虚拟地址空间的大小， 比如32位有4GB的内存空间，64位则是16EB（1TB = 1024GB，1 EB = 1,024 PB = 1,048,576 TB）。 整</description>
    </item>
    
    <item>
      <title>19年下半年计划</title>
      <link>https://heisenbergv.github.io/posts/lighter/2019-plan/</link>
      <pubDate>Fri, 23 Aug 2019 15:50:19 +0800</pubDate>
      
      <guid>https://heisenbergv.github.io/posts/lighter/2019-plan/</guid>
      <description>学习理财： 年化率达到15-20%，投资收益超越工资 《小狗钱钱》 《穷爸爸富爸爸》 《解读基金》 《好好赚钱》 《指数基金投资指南》 《股票大作手回忆录》 《巴比伦最富有的人》 《滚雪球》 《聪明的投资者》 《穷查理宝典》 《战胜华尔街》 《漫步华尔街》 《财报就像一本故事书》 《巴菲特的护城河》 《投资最重要的事》 读书： 不言而喻 《百年孤独》 《暗时间》 《别做正常的傻瓜》 《稀缺》 《人性的优点》 学习技术： 涨工资, 技术负责人 《深入理</description>
    </item>
    
    <item>
      <title>暗时间</title>
      <link>https://heisenbergv.github.io/posts/lighter/20190821-%E6%9A%97%E6%97%B6%E9%97%B4/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/posts/lighter/20190821-%E6%9A%97%E6%97%B6%E9%97%B4/</guid>
      <description>学习方面 最近看《暗时间》这本书，感觉很不错。 投入的时间≠实际时间，要用高效的方法学习，充分利用暗时间，学习过程要不断思考推断，而不是一味的死记硬背。 只有当进入沉浸状态学习效率才会提高，并且不被其他因素中断。 最后将学到的知识进行归纳，或者讲给别人听，加深巩固知识。 学习过程或者做一件事情的过程，如果能记录进度，知道自己还差多少完成，心里就会有所期待。 学以致用才是最终目的 实际时间 投入的时间*效率 才是真实</description>
    </item>
    
    <item>
      <title>钢琴入门练习</title>
      <link>https://heisenbergv.github.io/posts/lighter/20190815-%E9%92%A2%E7%90%B4%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Thu, 15 Aug 2019 11:40:19 +0800</pubDate>
      
      <guid>https://heisenbergv.github.io/posts/lighter/20190815-%E9%92%A2%E7%90%B4%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0/</guid>
      <description>练习曲1 提取码: gu7d</description>
    </item>
    
    <item>
      <title>Goroutine</title>
      <link>https://heisenbergv.github.io/posts/coder/20190807-groutine/</link>
      <pubDate>Wed, 07 Aug 2019 15:50:19 +0800</pubDate>
      
      <guid>https://heisenbergv.github.io/posts/coder/20190807-groutine/</guid>
      <description>并发与并行 并行(parallel): 指在同一时刻,有多条指令在多个处理器上同时执行(靠机器) 并发(concurrency): 指在同一时刻只能有一条指令执行,但多个进程指令被快速的轮换执行,宏观看起来是并行的,微观是cpu在不断的快速切换.(操作系统) 线程安全问题 协作式调度: 当线程终止或阻塞是发生调度 =&amp;gt; &amp;ldquo;主动让出&amp;rdquo; 抢占式调度: 允许逻辑上将可继续运行的线程在运行过程中暂停的调度</description>
    </item>
    
  </channel>
</rss>