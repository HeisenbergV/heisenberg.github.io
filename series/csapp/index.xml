<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSAPP on Heisenberg</title>
    <link>https://heisenbergv.github.io/series/csapp/</link>
    <description>Recent content in CSAPP on Heisenberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zuojxin@hotmail.com (heisenberg)</managingEditor>
    <webMaster>zuojxin@hotmail.com (heisenberg)</webMaster>
    <copyright>(c) 2018 - 2019 HeisebergV -- All rights reserved.</copyright>
    <lastBuildDate>Tue, 27 Aug 2019 15:50:19 +0800</lastBuildDate>
    
	<atom:link href="https://heisenbergv.github.io/series/csapp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSAPP(1) - 信息的表示和处理</title>
      <link>https://heisenbergv.github.io/posts/coder/20190827-csapp1/</link>
      <pubDate>Tue, 27 Aug 2019 15:50:19 +0800</pubDate>
      <author>zuojxin@hotmail.com (heisenberg)</author>
      <guid>https://heisenbergv.github.io/posts/coder/20190827-csapp1/</guid>
      <description>计算机存的什么 &amp;emsp;&amp;emsp;计算机存储的是二进制，每一位存储的是0或1。大多数计算机使用1字节（也就是8位），作为最小可寻址的内存单位。 每个字节都有一个唯一的数字来标识，也就是地址（address）。每个计算机都有一个字长（word size），也就是常说的64位操作系统，32位操作系统。字长决定了虚拟地址空间的大小， 比如32位有4GB的内存空间，64位则是16EB（1TB = 1024GB，1 EB = 1,024 PB = 1,048,576 TB）。
如何存各种类型 整型 Int 大小端 数据在内存中的存储顺序方式有大小端之分。 举例：如果int类型的x 存储在0x100的位置，十六进制表示：0x01234567 ，根据大小端有两种不同存储方式：
 大端： 按照最高有效位（这里是01）到最低有效位的顺序存储     0x100 0x200 0x300 0x400     01 23 45 67     小端：按照最低有效位（这里是67）到最高有效位的顺序存储     0x100 0x200 0x300 0x400     67 45 23 01    一般在应用层开发无需在意大小端，字节顺序不可见。只有在网络传输的时候，大端机器传输给小端机器，或者反过来时，才会有大小端转换问题。</description>
    </item>
    
  </channel>
</rss>