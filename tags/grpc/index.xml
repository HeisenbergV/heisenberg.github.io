<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>grpc - Tag - LoveIt</title>
        <link>https://example.com/tags/grpc/</link>
        <description>grpc - Tag - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 19 Jan 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://example.com/tags/grpc/" rel="self" type="application/rss+xml" /><item>
    <title>grpc-go</title>
    <link>https://example.com/post/2021/20210119-grpc/</link>
    <pubDate>Tue, 19 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://example.com/post/2021/20210119-grpc/</guid>
    <description><![CDATA[grpc Server 本文简单阅读源代码，了解grpc server的执行流程，从建立连接，到处理一条请求的过程。
使用方式 使用方式很简单，生成pb，注册建立服务，就可以等待请求了
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  type Hello struct{ } func (h *Hello) Say(ctx context.Context, request pb.HelloRequest)(*pb.HelloResponse, error){ fmt.Println(request.Msg) return &amp;pb.HelloResponse{Msg: &#34;wwww&#34;}, nil } func main(){ lis, _ := net.Listen(&#34;tcp&#34;, &#34;127.0.0.1:8888&#34;) //1. 创建一个grpc服务器对象  gRpcServer := grpc.NewServer() //2. 注册pb函数  pb.RegisterHelloServiceServer(gRpcServer, &amp;Hello{}) //3. 开启服务端  //阻塞  gRpcServer.Serve(lis) }   建立grpc server流程 NewServer NewServer进行创建一个grpc服务，初始化一些参数。还可以进行函数选项模式，来传递初始化的配置。 默认情况下会建立一个以下参数的grpc服务：]]></description>
</item></channel>
</rss>
