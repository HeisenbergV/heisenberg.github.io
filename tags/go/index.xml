<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>go on heisenberg blog</title>
    <link>/tags/go/</link>
    <description>Recent content in go on heisenberg blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©2021 heisenberg</copyright>
    <lastBuildDate>Fri, 01 May 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go 函数调用</title>
      <link>/post/2020/20200501-go-func/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/20200501-go-func/</guid>
      <description>参数传递 ** go的所有参数传递，都是值传递不存在引用传递。 ** 接口实现 1 2 3 4 5 6 7 8 9 10 type Cat struct { } func Hello(c Cat){ } func main(){ c := Cat{} Hello(c) } 1 2 3 4 5 6 7 8 9 10 type</description>
      
    </item>
    
    <item>
      <title>源码阅读 - go Context</title>
      <link>/post/2020/20200401-go-context/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/20200401-go-context/</guid>
      <description>Context有什么用 当处理一个请求A，而这个请求需要在3秒内完成相应，A请求分别创建了B和C goroutine来处理逻辑，如果B或者C处理</description>
      
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>/post/2019/20190917-go-channel/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/20190917-go-channel/</guid>
      <description>如何使用 channel在&amp;lt;-左边 表示向channel发送数据 channel在&amp;lt;-右边 表示从channel接收数据 close(channelName) 关闭一个cha</description>
      
    </item>
    
    <item>
      <title>Go Groutine</title>
      <link>/post/2019/20190917-go-groutine/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/20190917-go-groutine/</guid>
      <description>并发与并行 并行(parallel): 指在同一时刻,有多条指令在多个处理器上同时执行(靠机器) 并发(concurrency): 指在同一时刻只能</description>
      
    </item>
    
    <item>
      <title>Go 竞态问题</title>
      <link>/post/2019/20190903-go-race-condition/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/20190903-go-race-condition/</guid>
      <description>定义 单处理器中低优先级的进程被高优先级的进程抢占，同时他们访问同一块共享资源 多处理器中，CPU1的进程、CPU2的进程同时访问同一块共享资源</description>
      
    </item>
    
  </channel>
</rss>
