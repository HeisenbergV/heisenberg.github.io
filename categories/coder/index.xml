<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coder on heisenberg blog</title>
    <link>https://heisenbergv.github.io/categories/coder/</link>
    <description>Recent content in coder on heisenberg blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 05 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://heisenbergv.github.io/categories/coder/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>动手写操作系统-0</title>
      <link>https://heisenbergv.github.io/post/2020/20200405-os0/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2020/20200405-os0/</guid>
      <description>准备 根据MIT 6.828学习路线，来写操作系统。 23个课程，10个Lab 参考文档 xv6 文档 xv6源码 vx6源码分析 LEC 1 (rtm): Introduction and examples (handouts: xv6 book) Preparation: Read chapter 1 of the</description>
    </item>
    
    <item>
      <title>动手写操作系统-1</title>
      <link>https://heisenbergv.github.io/post/2020/20200405-os1/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2020/20200405-os1/</guid>
      <description>docker安装xv6环境 我使用docker进行环境搭建，构建自己的image，方便部署，之后换电脑也无需重复安装各种工具。 我的image:</description>
    </item>
    
    <item>
      <title>源码阅读 - go Context</title>
      <link>https://heisenbergv.github.io/post/2020/20200401-go-context/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2020/20200401-go-context/</guid>
      <description>Context有什么用 当处理一个请求A，而这个请求需要在3秒内完成相应，A请求分别创建了B和C goroutine来处理逻辑，如果B或者C处理</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://heisenbergv.github.io/post/2020/2020-0305-kafka/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2020/2020-0305-kafka/</guid>
      <description>安全问题 性能 容错 可扩展性 易用性 恢复 数据一致性</description>
    </item>
    
    <item>
      <title>读CSAPP(4) - 虚拟内存</title>
      <link>https://heisenbergv.github.io/post/2019/20190928-csapp4/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190928-csapp4/</guid>
      <description>虚拟内存系统解决了物理寻址的缺点。利用内存管理单元（MMU）和页表（Page Table）将虚拟地址转换为物理内存地址。 进程运行过程不再加载全</description>
    </item>
    
    <item>
      <title>读CSAPP(3) - 存储器层次结构</title>
      <link>https://heisenbergv.github.io/post/2019/20190923-csapp3/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190923-csapp3/</guid>
      <description>了解硬件 随机访问存储器（Random-Access Memory，RAM） RAM分两类，静态（SRAM）的和动态的（DRAM），SRAM要比D</description>
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>https://heisenbergv.github.io/post/2019/20190917-go-channel/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190917-go-channel/</guid>
      <description>如何使用 channel在&amp;lt;-左边 表示向channel发送数据 channel在&amp;lt;-右边 表示从channel接收数据 close(channelName) 关闭一个cha</description>
    </item>
    
    <item>
      <title>Go Groutine</title>
      <link>https://heisenbergv.github.io/post/2019/20190917-go-groutine/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190917-go-groutine/</guid>
      <description>并发与并行 并行(parallel): 指在同一时刻,有多条指令在多个处理器上同时执行(靠机器) 并发(concurrency): 指在同一时刻只能</description>
    </item>
    
    <item>
      <title>读CSAPP(2) - 程序性能优化</title>
      <link>https://heisenbergv.github.io/post/2019/20190909-csapp2/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190909-csapp2/</guid>
      <description>高效的程序需要做到 合适的数据结构与算法 编写出编译器能够有效优化以转换成高效可执行代码的源码。 将运算量特别大的计算，可以分成多部分，这些部分可</description>
    </item>
    
    <item>
      <title>Go 竞态问题</title>
      <link>https://heisenbergv.github.io/post/2019/20190903-go-race-condition/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190903-go-race-condition/</guid>
      <description>定义 单处理器中低优先级的进程被高优先级的进程抢占，同时他们访问同一块共享资源 多处理器中，CPU1的进程、CPU2的进程同时访问同一块共享资源</description>
    </item>
    
    <item>
      <title>读CSAPP(1) - 信息的表示和处理</title>
      <link>https://heisenbergv.github.io/post/2019/20190827-csapp1/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190827-csapp1/</guid>
      <description>计算机存的什么 计算机存储的是二进制，每一位存储的是0或1。大多数计算机使用1字节（也就是8位），作为最小可寻址的内存单位。 每个字节都有一个唯</description>
    </item>
    
  </channel>
</rss>